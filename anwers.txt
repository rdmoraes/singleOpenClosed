Design Principals Lab

2)In the “single”package, you have a class called “UserController”. It is violating “The Single ReasonabilityPrincipal”. 

a.Explain how this is happening?
UserController has more than one responsibility, this makes code rigid, (every change on the code can result change more dependencies),
fragile(tends to break on every change) and immobile( almost impossible to reuse in other applications) in the particular example 
we have validation, storage and creation of a new user happen in the same class

c.Do you notice any advantages to your code after you refactor?
The code has less coupling functionality in a class being separated into single responsibilities and can be easily reused and expanded.

3)In the package “open”, examinethe two classes “PhoneSubscriber and ISPSubscriber”

b.Do you notice any advantages to your code after you refactor?
The code is flexible to extend to another class, reduces the duplication of unnecessary instances and also the methods signature
is protected against modifications to the base class.



GitHub -> repo https://github.com/rdmoraes/singleOpenClosed